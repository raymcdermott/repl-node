["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate","~$at","~$re-com.core"],"~:excludes",["~#set",[]],"~:name","~$re-com.box","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^A","^A","~$re-com.config","^B","~$re-com.debug","^C","^7","^7"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^7","~$scroll-style?","^7","~$->attr","^C","~$align-style?","^7","~$justify-style?","^7","~$scroll-options-list","^7","~$css-style?","^7","~$include-args-desc?","^B","~$justify-options-list","^7","~$string-or-hiccup?","^7","~$align-options-list","^7"],"~:defs",["^ ","~$align-style",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","~:line",88,"~:column",7,"~:end-line",88,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^[",[["~$attribute","~$align"]]]]],"~:doc","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"^<","~$re-com.box/align-style","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",18,"~:method-params",["^[",[["^11","^12"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^W",1,"~:variadic?",false,"^V",88,"~:ret-tag","~$cljs.core/IMap","^X",88,"~:max-fixed-arity",2,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11","^12"]]]]],"^13","Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property"],"~$h-box",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",254,"^W",7,"^X",254,"^Y",12,"^Z",["^[",["^10",["^[",[["~$&",["^ ","~:keys",["~$size","~$width","~$height","~$min-width","~$min-height","~$max-width","~$max-height","~$justify","^12","~$align-self","~$margin","~$padding","~$gap","~$children","~$class","~$style","~$attr"],"~:or",["^ ","^1?","none","^1F","~:start","^12","~:stretch"],"~:as","~$args"]]]]]],"^13","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent","~:top-fn",["^ ","^18",true,"~:fixed-arity",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^17",["^[",[null]]]],"^<","~$re-com.box/h-box","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",12,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"~:methods",[["^ ","^1U",0,"^18",true,"~:tag",["^;",[null,"~$clj","~$cljs.core/IVector","~$any"]]]],"^V",254,"^19","^1[","^X",254,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^13","Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent"],"~$border",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",517,"^W",7,"^X",517,"^Y",13,"^Z",["^[",["^10",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1H","^1I","^20","~$l-border","~$r-border","~$t-border","~$b-border","~$radius","~$child","^1L","^1M","^1N","~$src","~$debug-as"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]]]],"^13","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)","^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1H","^1I","^20","^21","^22","^23","^24","^25","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1H","^1I","^20","^21","^22","^23","^24","^25","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^17",["^[",[null]]]],"^<","~$re-com.box/border","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",13,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1H","^1I","^20","^21","^22","^23","^24","^25","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1H","^1I","^20","^21","^22","^23","^24","^25","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1H","^1I","^20","^21","^22","^23","^24","^25","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"^1W",[["^ ","^1U",0,"^18",true,"^1X","^1Z"]],"^V",517,"^19","^1[","^X",517,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1H","^1I","^20","^21","^22","^23","^24","^25","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^13","Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)"],"~$visualise-flow?",["^ ","^<","~$re-com.box/visualise-flow?","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",12,"^W",1,"^X",12,"^Y",21,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",12,"^W",6,"^X",12,"^Y",21],"^1X","~$boolean"],"~$flex-flow-style",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",66,"^W",7,"^X",66,"^Y",22,"^Z",["^[",["^10",["^[",[["~$flex-flow"]]]]],"^13","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"^<","~$re-com.box/flex-flow-style","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",22,"^15",["^[",[["^2>"]]],"^16",null,"^17",["^[",[null,null]],"^W",1,"^18",false,"^V",66,"^19","^1:","^X",66,"^1;",1,"^1<",true,"^Z",["^[",["^10",["^[",[["^2>"]]]]],"^13","A cross-browser helper function to output flex-flow with all it's potential browser prefixes"],"~$h-box-args-desc",["^ ","^<","~$re-com.box/h-box-args-desc","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",232,"^W",1,"^X",232,"^Y",21,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",232,"^W",6,"^X",232,"^Y",21],"^1X",["^;",["^1Z","~$clj-nil"]]],"~$scroller",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",445,"^W",7,"^X",445,"^Y",15,"^Z",["^[",["^10",["^[",[["~$&",["^ ","^1>",["^1?","~$scroll","~$h-scroll","~$v-scroll","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","auto"],"^1R","^1S"]]]]]],"^13","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value","^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","auto"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","auto"],"^1R","^1S"]]]],"^17",["^[",[null]]]],"^<","~$re-com.box/scroller","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",15,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","auto"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","auto"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","auto"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"^1W",[["^ ","^1U",0,"^18",true,"^1X","^1Z"]],"^V",445,"^19","^1[","^X",445,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","auto"],"^1R","^1S"]]]],"^13","Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value"],"~$box",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",384,"^W",7,"^X",384,"^Y",10,"^Z",["^[",["^10",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]]]],"^13","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box","^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^17",["^[",[null]]]],"^<","~$re-com.box/box","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",10,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"^1W",[["^ ","^1U",0,"^18",true,"^1X","^1Z"]],"^V",384,"^19","^1[","^X",384,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^26","^1L","^1M","^1N","^27","^28"],"^1O",["^ ","^1?","none"],"^1R","^1S"]]]],"^13","Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box"],"~$box-args-desc",["^ ","^<","~$re-com.box/box-args-desc","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",363,"^W",1,"^X",363,"^Y",19,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",363,"^W",6,"^X",363,"^Y",19],"^1X",["^;",["^1Z","^2B"]]],"~$justify-style",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",72,"^W",7,"^X",72,"^Y",20,"^Z",["^[",["^10",["^[",[["^1F"]]]]],"^13","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"^<","~$re-com.box/justify-style","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",20,"^15",["^[",[["^1F"]]],"^16",null,"^17",["^[",[null,null]],"^W",1,"^18",false,"^V",72,"^19","^1:","^X",72,"^1;",1,"^1<",true,"^Z",["^[",["^10",["^[",[["^1F"]]]]],"^13","Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property"],"~$gap-args-desc",["^ ","^<","~$re-com.box/gap-args-desc","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",165,"^W",1,"^X",165,"^Y",19,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",165,"^W",6,"^X",165,"^Y",19],"^1X",["^;",["^1Z","^2B"]]],"~$v-box",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",319,"^W",7,"^X",319,"^Y",12,"^Z",["^[",["^10",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]]]],"^13","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent","^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^17",["^[",[null]]]],"^<","~$re-com.box/v-box","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",12,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"^1W",[["^ ","^1U",0,"^18",true,"^1X",["^;",[null,"^1Y","^1Z","^1["]]]],"^V",319,"^19","^1[","^X",319,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"],"^1O",["^ ","^1?","none","^1F","^1P","^12","^1Q"],"^1R","^1S"]]]],"^13","Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent"],"~$flex-child-style",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",19,"^W",7,"^X",19,"^Y",23,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specified). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specified). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common values above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"^<","~$re-com.box/flex-child-style","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",23,"^15",["^[",[["^1?"]]],"^16",null,"^17",["^[",[null,null]],"^W",1,"^18",false,"^V",19,"^19","^1:","^X",19,"^1;",1,"^1<",true,"^Z",["^[",["^10",["^[",[["^1?"]]]]],"^13","Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specified). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specified). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common values above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\d+)(px|%|em)|(\\d+)\\w(\\d+)\\w(.*) - remove double backslashes"],"~$line-args-desc",["^ ","^<","~$re-com.box/line-args-desc","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",199,"^W",1,"^X",199,"^Y",20,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",199,"^W",6,"^X",199,"^Y",20],"^1X",["^;",["^1Z","^2B"]]],"~$scroller-args-desc",["^ ","^<","~$re-com.box/scroller-args-desc","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",417,"^W",1,"^X",417,"^Y",24,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",417,"^W",6,"^X",417,"^Y",24],"^1X",["^;",["^1Z","^2B"]]],"~$line",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",209,"^W",7,"^X",209,"^Y",11,"^Z",["^[",["^10",["^[",[["~$&",["^ ","^1>",["^1?","~$color","^1L","^1M","^1N"],"^1O",["^ ","^1?","1px","^2Y","lightgray"],"^1R","^1S"]]]]]],"^13","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line","^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^2Y","^1L","^1M","^1N"],"^1O",["^ ","^1?","1px","^2Y","lightgray"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2Y","^1L","^1M","^1N"],"^1O",["^ ","^1?","1px","^2Y","lightgray"],"^1R","^1S"]]]],"^17",["^[",[null]]]],"^<","~$re-com.box/line","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",11,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^2Y","^1L","^1M","^1N"],"^1O",["^ ","^1?","1px","^2Y","lightgray"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2Y","^1L","^1M","^1N"],"^1O",["^ ","^1?","1px","^2Y","lightgray"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^2Y","^1L","^1M","^1N"],"^1O",["^ ","^1?","1px","^2Y","lightgray"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"^1W",[["^ ","^1U",0,"^18",true,"^1X","^1Z"]],"^V",209,"^19","^1[","^X",209,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2Y","^1L","^1M","^1N"],"^1O",["^ ","^1?","1px","^2Y","lightgray"],"^1R","^1S"]]]],"^13","Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line"],"~$scroll-style",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",105,"^W",7,"^X",105,"^Y",19,"^Z",["^[",["^10",["^[",[["^11","^2D"]]]]],"^13","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^<","~$re-com.box/scroll-style","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",19,"^15",["^[",[["^11","^2D"]]],"^16",null,"^17",["^[",[null,null]],"^W",1,"^18",false,"^V",105,"^19","^1:","^X",105,"^1;",2,"^1<",true,"^Z",["^[",["^10",["^[",[["^11","^2D"]]]]],"^13","Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value"],"^1J",["^ ","^S",null,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",176,"^W",7,"^X",176,"^Y",10,"^Z",["^[",["^10",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1L","^1M","^1N"],"^1R","^1S"]]]]]],"^13","Returns a component which produces a gap between children in a v-box/h-box along the main axis","^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1L","^1M","^1N"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1L","^1M","^1N"],"^1R","^1S"]]]],"^17",["^[",[null]]]],"^<","~$re-com.box/gap","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",10,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1L","^1M","^1N"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1L","^1M","^1N"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^1@","^1A","^1L","^1M","^1N"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"^1W",[["^ ","^1U",0,"^18",true,"^1X","^1Z"]],"^V",176,"^19","^1[","^X",176,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^1@","^1A","^1L","^1M","^1N"],"^1R","^1S"]]]],"^13","Returns a component which produces a gap between children in a v-box/h-box along the main axis"],"~$border-args-desc",["^ ","^<","~$re-com.box/border-args-desc","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",493,"^W",1,"^X",493,"^Y",22,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",493,"^W",6,"^X",493,"^Y",22],"^1X",["^;",["^1Z","^2B"]]],"~$v-box-args-desc",["^ ","^<","~$re-com.box/v-box-args-desc","^U","resources/public/js/compiled/out/re_com/box.cljs","^V",297,"^W",1,"^X",297,"^Y",21,"^T",["^ ","^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^V",297,"^W",6,"^X",297,"^Y",21],"^1X",["^;",["^1Z","^2B"]]],"~$box-base",["^ ","^S",null,"^T",["^ ","~:private",true,"^U","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/box.cljs","^Y",16,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^20","^21","^22","^23","^24","^25","~$bk-color","^26","~$class-name","^1L","^1M","^1N"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^20","^21","^22","^23","^24","^25","^38","^26","^39","^1L","^1M","^1N"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^W",8,"^V",121,"^X",121,"^Z",["^[",["^10",["^[",[["~$&",["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^20","^21","^22","^23","^24","^25","^38","^26","^39","^1L","^1M","^1N"],"^1R","^1S"]]]]]],"^13","This should generally NOT be used as it is the basis for the box, scroller and border components"],"^37",true,"^<","~$re-com.box/box-base","^U","resources/public/js/compiled/out/re_com/box.cljs","^Y",16,"^1T",["^ ","^18",true,"^1U",0,"^1;",0,"^15",[["^[",[["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^20","^21","^22","^23","^24","^25","^38","^26","^39","^1L","^1M","^1N"],"^1R","^1S"]]]],"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^20","^21","^22","^23","^24","^25","^38","^26","^39","^1L","^1M","^1N"],"^1R","^1S"]]]],"^17",["^[",[null]]],"^15",[["^[",[["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^20","^21","^22","^23","^24","^25","^38","^26","^39","^1L","^1M","^1N"],"^1R","^1S"]]]],"^16",null,"^1U",0,"^17",["^[",[null]],"^W",1,"^18",true,"^1W",[["^ ","^1U",0,"^18",true,"^1X","^1Z"]],"^V",121,"^19","^1[","^X",121,"^1;",0,"^1<",true,"^Z",["^[",[["~$&",["^ ","^1>",["^1?","^2D","^2E","^2F","^1@","^1A","^1B","^1C","^1D","^1E","^1F","^12","^1G","^1H","^1I","^20","^21","^22","^23","^24","^25","^38","^26","^39","^1L","^1M","^1N"],"^1R","^1S"]]]],"^13","This should generally NOT be used as it is the basis for the box, scroller and border components"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^9","^9","^7","^7"],"~:cljs.analyzer/constants",["^ ","~:seen",["^;",["~:description","~:min-width","~:children","~:align-items","~:align","~:bk-color","~:max-height","~:border-right","~:color","~:min-height","~:r-border","~:justify","~:default","~:overflow","^<","~:-webkit-flex-flow","^U","~:background-color","~:h-scroll","~:-webkit-flex","~:-webkit-justify-content","~:width","^1P","~:type","~:flex","~:src","~:b-border","~:max-width","~:radius","~:border-left","~:size","~:style","~:div","~:span.bold","~:debug-as","^V","~:scroll","~:l-border","~:class","~:padding","~:justify-content","~:gap","~:t-border","~:code","~:overflow-x","~:validate-fn","~:br","~:class-name","~:child","~:align-self","~:border","~:border-top","~:overflow-y","~:border-radius","^1Q","~:v-scroll","~:auto","~:required","~:height","~:border-bottom","~:span","~:flex-flow","~:margin","~:attr"]],"~:order",["^3P","^3T","^3M","^4K","^3Q","^47","^4?","^4@","^4A","^4E","^4H","^4L","^4M","^3@","^3C","^3D","^3E","^3H","^3I","^3J","^3O","^3R","^3V","^3W","^3X","^3Z","^3[","^43","^45","^44","^46","^49","^4>","^3L","^4;","^4C","^3B","^3Y","^3F","^4B","^4I","^4D","^3N","^40","^<","^4G","^3S","^4<","^3?","^4J","^4:","^4=","^3U","^42","^3K","^3G","^3A","^41","^1P","^1Q","^48","^U","^V","^4F"]],"^13",null]