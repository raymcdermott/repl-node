["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate","~$reflect-current-component","~$re-com.core","~$handler-fn","^9","~$at","^9"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:imports",null,"~:requires",["^ ","~$re-com.debug","^B","~$reagent","~$reagent.core","~$re-com.util","^E","~$re-com.text","^F","~$re-com.box","^G","^D","^D","~$debug","^B","^7","^7","~$re-com.config","^I"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^7","~$h-box","^G","~$parts?","^7","~$deref-or-value","^E","~$->attr","^B","~$css-style?","^7","~$include-args-desc?","^I","~$label","^F","~$number-or-string?","^7","~$pad-zero-number","^E","~$gap","^G"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","~:line",55,"~:column",7,"~:end-line",55,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^15",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^>","~$re-com.input-time/text->time","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",17,"~:method-params",["^15",[["^17"]]],"~:protocol-impl",null,"~:arglists-meta",["^15",[null,null]],"^11",1,"~:variadic?",false,"^10",55,"~:ret-tag","~$number","^12",55,"~:max-fixed-arity",1,"~:fn-var",true,"^14",["^15",["^16",["^15",[["^17"]]]]],"^18","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",137,"^11",8,"^12",137,"^13",18,"~:private",true,"^14",["^15",["^16",["^15",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^18","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^1C",true,"^>","~$re-com.input-time/on-defocus","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",18,"^1:",["^15",[["^1D","^1E","^1F","^1G","^1H"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",137,"^1>",["^=",["~$any","~$clj-nil"]],"^12",137,"^1@",5,"^1A",true,"^14",["^15",["^16",["^15",[["^1D","^1E","^1F","^1G","^1H"]]]]],"^18","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",79,"^11",7,"^12",79,"^13",18,"^14",["^15",["^16",["^15",[["~$time"]]]]]],"^>","~$re-com.input-time/valid-time?","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",18,"^1:",["^15",[["^1M"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",79,"^1>","~$boolean","^12",79,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["^1M"]]]]]],"~$input-time-args-desc",["^ ","^>","~$re-com.input-time/input-time-args-desc","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^10",159,"^11",1,"^12",159,"^13",26,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",159,"^11",6,"^12",159,"^13",26],"~:tag",["^=",["~$cljs.core/IVector","^1K"]]],"~$time->hrs",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",20,"^11",8,"^12",20,"^13",17,"^1C",true,"^14",["^15",["^16",["^15",[["^1M"]]]]]],"^1C",true,"^>","~$re-com.input-time/time->hrs","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",17,"^1:",["^15",[["^1M"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",20,"^1>","^1?","^12",20,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["^1M"]]]]]],"~$time->mins",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",15,"^11",8,"^12",15,"^13",18,"^1C",true,"^14",["^15",["^16",["^15",[["^1M"]]]]]],"^1C",true,"^>","~$re-com.input-time/time->mins","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",18,"^1:",["^15",[["^1M"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",15,"^1>","^1?","^12",15,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["^1M"]]]]]],"~$triple->time",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",30,"^11",8,"^12",30,"^13",20,"^1C",true,"^14",["^15",["^16",["^15",[[["~$hr","~$_","~$mi"]]]]]],"^18","Return a time integer from a triple int vector of form  [H  _  M]"],"^1C",true,"^>","~$re-com.input-time/triple->time","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",20,"^1:",["^15",[["~$p__18016"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",30,"^1>","^1?","^12",30,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[[["^1Y","~$_","^1Z"]]]]]],"^18","Return a time integer from a triple int vector of form  [H  _  M]"],"~$input-time-parts",["^ ","^>","~$re-com.input-time/input-time-parts","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^10",155,"^11",1,"^12",155,"^13",22,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",155,"^11",6,"^12",155,"^13",22],"^1R",["^=",["~$clj","^1J","~$cljs.core/ISet","~$cljs.core/MetaFn","^1K"]]],"~$valid-text?",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",71,"^11",7,"^12",71,"^13",18,"^14",["^15",["^16",["^15",[["^17"]]]]],"^18","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^>","~$re-com.input-time/valid-text?","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",18,"^1:",["^15",[["^17"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",71,"^1>","^1O","^12",71,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["^17"]]]]],"^18","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",64,"^11",7,"^12",64,"^13",17,"^14",["^15",["^16",["^15",[["^1M"]]]]],"^18","return a string of format HH:MM for 'time'"],"^>","~$re-com.input-time/time->text","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",17,"^1:",["^15",[["^1M"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",64,"^1>","~$string","^12",64,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["^1M"]]]]],"^18","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",45,"^11",3,"^12",45,"^13",20,"^1C",true],"^1C",true,"^>","~$re-com.input-time/triple-seeking-re","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",20,"^11",1,"^10",44,"^12",45,"^1R","^1J"],"~$on-new-keypress",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",122,"^11",8,"^12",122,"^13",23,"^1C",true,"^14",["^15",["^16",["^15",[["~$event","^1D"]]]]],"^18","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^1C",true,"^>","~$re-com.input-time/on-new-keypress","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",23,"^1:",["^15",[["^2>","^1D"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",122,"^1>",["^=",[null,"^1J","^1K"]],"^12",122,"^1@",2,"^1A",true,"^14",["^15",["^16",["^15",[["^2>","^1D"]]]]],"^18","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",24,"^11",8,"^12",24,"^13",14,"^1C",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^18","Parse the string 's' to a valid int. On parse failure, return 0"],"^1C",true,"^>","~$re-com.input-time/to-int","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",14,"^1:",["^15",[["~$s"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",24,"^1>",["^=",["~$js","^1?"]],"^12",24,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["~$s"]]]]],"^18","Parse the string 's' to a valid int. On parse failure, return 0"],"~$input-time-parts-desc",["^ ","^>","~$re-com.input-time/input-time-parts-desc","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^10",148,"^11",1,"^12",148,"^13",27,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",148,"^11",6,"^12",148,"^13",27],"^1R",["^=",["^1S","^1K"]]],"~$extract-triple-from-text",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",47,"^11",8,"^12",47,"^13",32,"^1C",true,"^14",["^15",["^16",["^15",[["^17"]]]]]],"^1C",true,"^>","~$re-com.input-time/extract-triple-from-text","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",32,"^1:",["^15",[["^17"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",47,"^1>","~$cljs.core/LazySeq","^12",47,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["^17"]]]]]],"~$validate-arg-times",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",87,"^11",8,"^12",87,"^13",26,"^1C",true,"^14",["^15",["^16",["^15",[["~$model","~$minimum","~$maximum","~$args"]]]]]],"^1C",true,"^>","~$re-com.input-time/validate-arg-times","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",26,"^1:",["^15",[["^2I","^2J","^2K","^2L"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",87,"^1>",["^=",["^1S","^1K"]],"^12",87,"^1@",4,"^1A",true,"^14",["^15",["^16",["^15",[["^2I","^2J","^2K","^2L"]]]]]],"~$force-valid-time",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",111,"^11",8,"^12",111,"^13",24,"^1C",true,"^14",["^15",["^16",["^15",[["^1M","^1E","^1F","~$previous"]]]]],"^18","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^1C",true,"^>","~$re-com.input-time/force-valid-time","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",24,"^1:",["^15",[["^1M","^1E","^1F","^2O"]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",111,"^12",111,"^1@",4,"^1A",true,"^14",["^15",["^16",["^15",[["^1M","^1E","^1F","^2O"]]]]],"^18","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",177,"^11",7,"^12",177,"^13",17,"^14",["^15",["^16",["^15",[["~$&",["^ ","~:keys",["^2I","^2J","^2K"],"~:as","^2L","~:or",["^ ","^2J",0,"^2K",2359]]]]]]],"^18","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^1=",true,"~:fixed-arity",0,"^1@",0,"^1:",[["^15",[["^ ","^2R",["^2I","^2J","^2K"],"^2S","^2L","^2T",["^ ","^2J",0,"^2K",2359]]]]],"^14",["^15",[["~$&",["^ ","^2R",["^2I","^2J","^2K"],"^2S","^2L","^2T",["^ ","^2J",0,"^2K",2359]]]]],"^1<",["^15",[null]]]],"^>","~$re-com.input-time/input-time","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",17,"^2U",["^ ","^1=",true,"^2V",0,"^1@",0,"^1:",[["^15",[["^ ","^2R",["^2I","^2J","^2K"],"^2S","^2L","^2T",["^ ","^2J",0,"^2K",2359]]]]],"^14",["^15",[["~$&",["^ ","^2R",["^2I","^2J","^2K"],"^2S","^2L","^2T",["^ ","^2J",0,"^2K",2359]]]]],"^1<",["^15",[null]]],"^1:",[["^15",[["^ ","^2R",["^2I","^2J","^2K"],"^2S","^2L","^2T",["^ ","^2J",0,"^2K",2359]]]]],"^1;",null,"^2V",0,"^1<",["^15",[null]],"^11",1,"^1=",true,"~:methods",[["^ ","^2V",0,"^1=",true,"^1R",["^=",["^1S","~$function"]]]],"^10",177,"^1>","^1J","^12",177,"^1@",0,"^1A",true,"^14",["^15",[["~$&",["^ ","^2R",["^2I","^2J","^2K"],"^2S","^2L","^2T",["^ ","^2J",0,"^2K",2359]]]]],"^18","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^Y",null,"^Z",["^ ","^[","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/input_time.cljs","^10",130,"^11",8,"^12",130,"^13",27,"^1C",true,"^14",["^15",["^16",["^15",[["~$ev"]]]]],"^18","When Enter is pressed, force the component to lose focus"],"^1C",true,"^>","~$re-com.input-time/lose-focus-if-enter","^[","resources/public/js/compiled/out/re_com/input_time.cljs","^13",27,"^1:",["^15",[["^2["]]],"^1;",null,"^1<",["^15",[null,null]],"^11",1,"^1=",false,"^10",130,"^1>",["^=",["^1O","^1K"]],"^12",130,"^1@",1,"^1A",true,"^14",["^15",["^16",["^15",[["^2["]]]]],"^18","When Enter is pressed, force the component to lose focus"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^9","^9","^7","^7","^C","^D","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^=",["~:args","~:description","~:children","~:validate-fn-map","~:problems","~:disabled","~:else","~:time-icon","~:default","^>","~:value","~:maximum","~:hide-border?","~:parts","~:width","~:on-blur","~:type","~:problem","~:src","~:component","~:style","~:level","~:on-key-up","~:div","~:validate-fn-result","~:debug-as","~:class","~:notes","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:legacy","~:input","~:time-icon-container","~:on-change","~:border","~:disabled?","~:impl","~:wrapper","~:i","~:required","~:message","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^3;","^3=","^3G","^35","^39","^3E","^3L","^38","^43","^>","^3I","^3N","^40","^3O","^41","^3D","^3V","^3X","^3<","^42","^3T","^36","^47","^3Y","^3P","^3?","^3[","^3Q","^3@","^3B","^44","^3H","^48","^45","^3R","^3U","^3A","^3F","^3M","^3Z","^37","^3W","^3>","^3:","^3C","^3J","^3K","~:i","^3S","^46"]],"^18",null]