["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$goog",["^ ","~$DEBUG",["^ "]],"~$Window",["^ ","~$prototype",["^ ","~$hasOwnProperty",["^ "],"~$addResizeListener",["^ "],"~$removeResizeListener",["^ "]]],"~$HTMLDocument",["^ ","^6",["^ ","~$getElementById",["^ "]]]],"~:use-macros",["^ ","~$reaction","~$reagent.ratom","~$validate-args-macro","~$re-com.validate","~$reflect-current-component","~$re-com.core","~$handler-fn","^B","~$at","^B"],"~:excludes",["~#set",[]],"~:name","~$re-com.v-table","~:imports",null,"~:requires",["^ ","~$re-com.debug","^K","~$reagent","~$reagent.core","~$re-com.util","^N","~$re-com.box","^O","^M","^M","~$box","^O","~$util","^N","~$re-com.dmm-tracker","^R","^@","^@","~$re-com.config","^S"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$px-n","^N","~$ifn-or-nil?","^@","~$parts?","^@","~$captureMouseMoves","^R","~$deref-or-value","^N","~$->attr","^K","~$make-dmm-tracker","^R","~$include-args-desc?","^S","~$map-atom?","^@","~$vector-atom?","^@","~$debug?","^S"],"~:defs",["^ ","~$bottom-left-content",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","~:line",238,"~:column",7,"~:end-line",238,"~:end-column",26,"~:arglists",["~#list",["~$quote",["^1?",[["~$bottom-left-renderer","~$column-footer-height","~$class","~$style","~$attr"]]]]],"~:doc","Render section 3 - the content component"],"^G","~$re-com.v-table/bottom-left-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",26,"~:method-params",["^1?",[["^1A","^1B","^1C","^1D","^1E"]]],"~:protocol-impl",null,"~:arglists-meta",["^1?",[null,null]],"^1;",1,"~:variadic?",false,"^1:",238,"~:ret-tag","~$cljs.core/IVector","^1<",238,"~:max-fixed-arity",5,"~:fn-var",true,"^1>",["^1?",["^1@",["^1?",[["^1A","^1B","^1C","^1D","^1E"]]]]],"^1F","Render section 3 - the content component"],"~$row-header-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",180,"^1;",7,"^1<",180,"^1=",25,"^1>",["^1?",["^1@",["^1?",[["~$row-header-renderer","~$key-fn","~$top-row-index","~$rows","~$scroll-y","^1C","^1D","^1E"]]]]],"^1F","The row-header section 'content' component. Takes a function that renders row-headers and draws all of\n  them in section 2 (sections explained below).\n  When in virtual? mode, only a screen-full of row-headers are passed to this component at any one time.\n  This component is also responsible for setting the vertical scroll position of this section based on scroll-y\n\n  Arguments:\n   - row-header-renderer function that knows how to render row-headers (will be passed the 0-based row-index and row to get the data from)\n   - key-fn              function/keyword that returns a unique id out of the row map/object, or nil to use the row's 0-based row-index\n   - top-row-index       the 0-based index of the row that is currently at the top of the viewport (for virtual mode)\n   - rows                a vector of row maps (or objects) to render the row-headers from\n   - scroll-y            current horizontal scrollbar position in px\n  "],"^G","~$re-com.v-table/row-header-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",25,"^1H",["^1?",[["^1Q","^1R","^1S","^1T","^1U","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",180,"^1L","^1M","^1<",180,"^1N",8,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^1Q","^1R","^1S","^1T","^1U","^1C","^1D","^1E"]]]]],"^1F","The row-header section 'content' component. Takes a function that renders row-headers and draws all of\n  them in section 2 (sections explained below).\n  When in virtual? mode, only a screen-full of row-headers are passed to this component at any one time.\n  This component is also responsible for setting the vertical scroll position of this section based on scroll-y\n\n  Arguments:\n   - row-header-renderer function that knows how to render row-headers (will be passed the 0-based row-index and row to get the data from)\n   - key-fn              function/keyword that returns a unique id out of the row map/object, or nil to use the row's 0-based row-index\n   - top-row-index       the 0-based index of the row that is currently at the top of the viewport (for virtual mode)\n   - rows                a vector of row maps (or objects) to render the row-headers from\n   - scroll-y            current horizontal scrollbar position in px\n  "],"~$column-header-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",253,"^1;",7,"^1<",253,"^1=",28,"^1>",["^1?",["^1@",["^1?",[["~$column-header-renderer","~$scroll-x","^1C","^1D","^1E"]]]]],"^1F","The column-header section 'content' component. Takes a function that renders column-headers and draws all of\n  them in section 4 (sections explained below).\n  This component is also responsible for setting the horizontal scroll position of this section based on scroll-x\n\n  Arguments:\n   - column-header-renderer function that knows how to render column-headers\n   - scroll-x               current horizontal scrollbar position in px\n  "],"^G","~$re-com.v-table/column-header-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",28,"^1H",["^1?",[["^1X","^1Y","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",253,"^1L","^1M","^1<",253,"^1N",5,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^1X","^1Y","^1C","^1D","^1E"]]]]],"^1F","The column-header section 'content' component. Takes a function that renders column-headers and draws all of\n  them in section 4 (sections explained below).\n  This component is also responsible for setting the horizontal scroll position of this section based on scroll-x\n\n  Arguments:\n   - column-header-renderer function that knows how to render column-headers\n   - scroll-x               current horizontal scrollbar position in px\n  "],"~$scrollbar",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",34,"^1;",7,"^1<",34,"^1=",16,"^1>",["^1?",["^1@",["^1?",[["~$&",["^ ","~:keys",["~$type","~$width","~$on-change"],"~:or",["^ ","^22",10]]]]]]],"^1F","Render a horizontal or vertical scrollbar\n\n  Arguments:\n   - type           [keyword] scrollbar type (:horizontal or :vertical)\n   - length         [number] px size of the long edge. If not specified, scrollbar will fill space provided\n   - width          [optional number, default = 10] px size of the short edge\n   - content-length [number] px length of the content this scrollbar will be in charge of\n   - scroll-pos     [number] current px scroll position for the beginning of the scrollbar 'thumb'\n   - on-change      [fn] called every time the thumb is dragged. Args: new-scroll-pos\n   - style          [map] CSS style map\n   ","~:top-fn",["^ ","^1K",true,"~:fixed-arity",0,"^1N",0,"^1H",[["^1?",[["^ ","^20",["^21","^22","^23"],"^24",["^ ","^22",10]]]]],"^1>",["^1?",[["~$&",["^ ","^20",["^21","^22","^23"],"^24",["^ ","^22",10]]]]],"^1J",["^1?",[null]]]],"^G","~$re-com.v-table/scrollbar","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",16,"^25",["^ ","^1K",true,"^26",0,"^1N",0,"^1H",[["^1?",[["^ ","^20",["^21","^22","^23"],"^24",["^ ","^22",10]]]]],"^1>",["^1?",[["~$&",["^ ","^20",["^21","^22","^23"],"^24",["^ ","^22",10]]]]],"^1J",["^1?",[null]]],"^1H",[["^1?",[["^ ","^20",["^21","^22","^23"],"^24",["^ ","^22",10]]]]],"^1I",null,"^26",0,"^1J",["^1?",[null]],"^1;",1,"^1K",true,"~:methods",[["^ ","^26",0,"^1K",true,"~:tag","~$function"]],"^1:",34,"^1L","~$any","^1<",34,"^1N",0,"^1O",true,"^1>",["^1?",[["~$&",["^ ","^20",["^21","^22","^23"],"^24",["^ ","^22",10]]]]],"^1F","Render a horizontal or vertical scrollbar\n\n  Arguments:\n   - type           [keyword] scrollbar type (:horizontal or :vertical)\n   - length         [number] px size of the long edge. If not specified, scrollbar will fill space provided\n   - width          [optional number, default = 10] px size of the short edge\n   - content-length [number] px length of the content this scrollbar will be in charge of\n   - scroll-pos     [number] current px scroll position for the beginning of the scrollbar 'thumb'\n   - on-change      [fn] called every time the thumb is dragged. Args: new-scroll-pos\n   - style          [map] CSS style map\n   "],"~$show-row-data-on-alt-click",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",24,"^1;",7,"^1<",24,"^1=",33,"^1>",["^1?",["^1@",["^1?",[["~$row","~$row-index","~$event"]]]]],"^1F","Make a call to this function in the click event of your row renderer, then every time they Alt+Click on a row,\n  The raw cljs object used to render that row will be popped into DevTools :-)\n  Here is what the line might look like:\n  :on-click (handler-fn (v-table/show-row-data-on-alt-click row row-index event))"],"^G","~$re-com.v-table/show-row-data-on-alt-click","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",33,"^1H",["^1?",[["^2=","^2>","^2?"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",24,"^1L",["^F",["~$js","~$clj-nil"]],"^1<",24,"^1N",3,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^2=","^2>","^2?"]]]]],"^1F","Make a call to this function in the click event of your row renderer, then every time they Alt+Click on a row,\n  The raw cljs object used to render that row will be popped into DevTools :-)\n  Here is what the line might look like:\n  :on-click (handler-fn (v-table/show-row-data-on-alt-click row row-index event))"],"~$row-footer-viewport",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",442,"^1;",7,"^1<",442,"^1=",26,"^1>",["^1?",["^1@",["^1?",[["~$row-footer-renderer","^1R","^1S","^1T","^1U","~$row-viewport-height","~$content-rows-height","^1C","^1D","^1E","~$content-class","~$content-style","~$content-attr"]]]]],"^1F","Render section 8 - the viewport component (which renders the content component as its child)"],"^G","~$re-com.v-table/row-footer-viewport","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",26,"^1H",["^1?",[["^2D","^1R","^1S","^1T","^1U","^2E","^2F","^1C","^1D","^1E","^2G","^2H","^2I"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",442,"^1L","^1M","^1<",442,"^1N",13,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^2D","^1R","^1S","^1T","^1U","^2E","^2F","^1C","^1D","^1E","^2G","^2H","^2I"]]]]],"^1F","Render section 8 - the viewport component (which renders the content component as its child)"],"~$top-right-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",400,"^1;",7,"^1<",400,"^1=",24,"^1>",["^1?",["^1@",["^1?",[["~$top-right-renderer","~$column-header-height","^1C","^1D","^1E"]]]]],"^1F","Render section 7 - the content component"],"^G","~$re-com.v-table/top-right-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",24,"^1H",["^1?",[["^2L","^2M","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",400,"^1L","^1M","^1<",400,"^1N",5,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^2L","^2M","^1C","^1D","^1E"]]]]],"^1F","Render section 7 - the content component"],"~$row-viewport",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",330,"^1;",7,"^1<",330,"^1=",19,"^1>",["^1?",["^1@",["^1?",[["~$row-renderer","^1R","^1S","^1T","^1Y","^1U","~$row-selection-fn",["~$selection-renderer","~$on-mouse-down","~$on-mouse-enter","~$on-mouse-leave"],"~$selection-allowed?","^2E","~$row-viewport-width","~$row-viewport-id","^2F","~$content-rows-width","^1C","^1D","^1E","~$sel-class","~$sel-style","~$sel-attr","^2G","^2H","^2I"]]]]],"^1F","Render section 5 - the viewport component (which renders the content component as its child)"],"^G","~$re-com.v-table/row-viewport","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",19,"^1H",["^1?",[["^2P","^1R","^1S","^1T","^1Y","^1U","^2Q","~$p__13399","^2V","^2E","^2W","^2X","^2F","^2Y","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",330,"^1L","^1M","^1<",330,"^1N",23,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^2P","^1R","^1S","^1T","^1Y","^1U","^2Q",["^2R","^2S","^2T","^2U"],"^2V","^2E","^2W","^2X","^2F","^2Y","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]]]],"^1F","Render section 5 - the viewport component (which renders the content component as its child)"],"~$column-header-viewport",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",272,"^1;",7,"^1<",272,"^1=",29,"^1>",["^1?",["^1@",["^1?",[["^1X","^1Y","~$column-header-selection-fn",["^2R","^2S","^2T","^2U"],"^2V","^2W","^2M","^2Y","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]]]],"^1F","Render section 4 - the viewport component (which renders the content component as its child)"],"^G","~$re-com.v-table/column-header-viewport","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",29,"^1H",["^1?",[["^1X","^1Y","^34","~$p__13395","^2V","^2W","^2M","^2Y","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",272,"^1L","^1M","^1<",272,"^1N",17,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^1X","^1Y","^34",["^2R","^2S","^2T","^2U"],"^2V","^2W","^2M","^2Y","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]]]],"^1F","Render section 4 - the viewport component (which renders the content component as its child)"],"~$v-table",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",552,"^1;",7,"^1<",552,"^1=",14,"^1>",["^1?",["^1@",["^1?",[["~$&",["^ ","^20",["~$model","~$virtual?","~$row-height","^2W","^2E","~$max-row-viewport-height","~$src"],"^24",["^ ","^39",true],"~:as","~$args"]]]]]],"^1F","Renders a scrollable table with optional fixed column and row headers and footers, totalling nine addressable sections\n  By default, it only displays rows that are visible, so is very efficient for large data structures\n  The table supports click+drag selections within the rows section (5), row header section (2) and col header section (4)\n\n  The table is laid out using an h-box for the outer component, with four v-box 'container\n  sections' sitting next to each other:\n\n  +-----+---------+-----+-+\n  |     |         |     | |\n  |     |         |     | |\n  |     |         |     | |\n  |LEFT | MIDDLE  |RIGHT|VS\n  |     |         |     | |\n  |     |         |     | |\n  |     |         |     | |\n  |- - -|- - - - -|- - -|-|\n  +-----+---HS----+-----+-+\n\n  The four 'container section' v-boxes are named:\n   - LEFT:   contains the row headers (and corresponding two corner sections)\n   - MIDDLE: contains the main content area (the rows), along with column headers and footers and the horizontal scrollbar (HS)\n   - RIGHT:  contains the row footers (and corresponding two corner sections)\n   - VS:     contains the vertical scrollbar\n\n  Each container section holds 'sections' which are numbered:\n\n  +-----+---------+-----+\n  |  1  |    4    |  7  |\n  +-----+---------+-----+-+\n  |     |         |     | |\n  |  2  |    5    |  8  |VS\n  |     |         |     | |\n  +-----+---------+-----+ +\n  |  3  |    6    |  9  |\n  +-----+---------+-----+\n        +---HS----+\n\n  The nine 'sections' are named:\n   - 1: top-left\n   - 2: row-headers\n   - 3: bottom-left\n   - 4: column-headers\n   - 5: rows\n   - 6: column-footers\n   - 7: top-right\n   - 8: row-footers\n   - 9: bottom-right\n\n  The corner sections (1, 3, 7, 9) are fixed (i.e. do not scroll) and consist of a single 'content' area\n\n  The other sections are scrollable: (2, 8) vertical, (4, 6) horizontal and (5) vertical & horizontal as\n  a 'viewport' onto their (potentially larger) 'content' area\n\n\n  Arguments:\n\n   - model                    [mandatory atom containing vector of maps (or other data structures)]\n                              The data to be displayed, consisting of rows. Each row is normally a map but could be anything)\n                              Rows MUST contain a unique id (specified via :key-fn arg)\n                              They are passed to the row-renderer (section 5), row-header-renderer (section 2) and row-footer-renderer (section 8)\n                              NOTE: data for sections 1, 3, 4, 6, 7 and 9 are not included in model\n\n   - key-fn                   [optional fn or keyword to extract a unique id from the row data, or not specified/nil to indicate\n                              that v-table should use the internally generated 0-based row-id]\n                              A row is passed to key-fn and it returns the unique identifier for that row\n\n   - virtual?                 [optional bool, default = true]\n                              When true, use virtual feature where only a screen-full (viewport) of rows are rendered at any one time\n                              Use true for tables with many rows to reduce initialisation time and resource usage\n                              You can use false for smaller tables to improve performance of vertical scrolling\n\n   - remove-empty-row-space?  [optional bool, default = true]\n                              Specifies whether to remove empty row space (the space between the last row and the horizontal scrollbar)\n                              for small tables that don't fill the space available to the v-table\n                              This will cause the horizontal scrollbar section to be nestled against the last row, and whatever is\n                              underneath the v-table to be brought up with it\n\n   - max-width                [optional string, default = nil (table will fill available space)]\n                              MAXIMUM width of the entire v-table\n                              NOTE: This is specified as a normal CSS value, e.g. \"1024px\" or \"90%\"\n\n\n     ========== SECTION 1 - top-left\n\n   - top-left-renderer        [optional (fn [])]\n                              Render the top left section\n                              Height is determined by the :column-header-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n\n     ========== SECTION 2 - row-headers\n\n   - row-header-renderer      [optional (fn [row-index row])]\n                              Render a single row header\n                              Height is determined by the row-height arg\n                              Width is determined by the component itself\n                              Passed args: row-index (0-based), row (a map, or other data structure from model)\n\n   - row-header-selection-fn  [optional (fn [selection-event coords ctrlKey shiftKey event])]\n                              If provided, indicates that the row header section is selectable via click+drag\n                              Passed args: see row-selection-fn below for details\n                              Use the :row-header-selection-rect style-part to style the selection rectangle\n\n\n     ========== SECTION 3 - bottom-left\n\n   - bottom-left-renderer     [optional (fn [])]\n                              Render the bottom left section\n                              Height is determined by the column-footer-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n                              NOTE: The width of the LEFT container section (encompassing sections 1, 2 and 3 above)\n                                    is determined by the widest section\n\n\n     ========== SECTION 4 - column-headers\n\n   - column-header-renderer   [optional (fn [])]\n                              Render the entire column header\n                              Height is determined by the column-header-height arg\n                              Width is determined by the width available to the v-table OR the row-viewport-width arg if specified\n                              Passed args: none\n\n   - column-header-height     [optional number, default = 0]\n                              px height of the column header section\n\n   - column-header-selection-fn  [optional (fn [selection-event coords ctrlKey shiftKey event])]\n                              if provided, indicates that the column header section is selectable via click+drag\n                              Passed args: see row-selection-fn below for details\n                              Use the :column-header-selection-rect style-part to style the selection rectangle\n\n\n     ========== SECTION 5 - rows (main content area)\n\n   - row-renderer             [mandatory (fn [row-index row])]\n                              Render a single content row\n                              [DJ] Wants to state that columns are not virtual and all horizontal content is rendered\n                              Height is determined by the row-height arg\n                              Width is determined by the width available to the v-table OR the row-viewport-width arg if specified\n                              Passed args: row-index (0-based), row (a map, or other data structure from model)\n\n   - row-height               [mandatory number]\n                              px height of each row\n\n   - row-content-width        [mandatory number]\n                              px width of the content rendered by row-renderer\n\n   - row-viewport-width       [optional number, default = nil (take up all available width)]\n                              px width of the row viewport area\n                              If not specified, takes up all width available to it\n\n   - row-viewport-height      [optional number, default = nil (take up all available height)]\n                              px height of the row viewport area\n                              If not specified, takes up all height available to it\n\n   - max-row-viewport-height  [optional number, default = nil (determined by parent height and number of rows)]\n                              MAXIMUM px height of the row viewport area\n                              Conveniently excludes height of col header and footer and horizontal scrollbar\n                              For this to be effective, the parent of the v-table component should have ':size none'\n\n   - row-selection-fn         [optional (fn [selection-event coords ctrlKey shiftKey event])]\n                              If provided, indicates that the row section is selectable via click+drag\n                              The fn will be called (on mouse-down, mouse-move and mouse-up) with four positional args\n                              Passed args:\n                                    selection-event: One of :selection-start, :selecting or :selection-end\n                                    coords:          {:start-row integer   ;; rows are returned as zero-based row numbers (except column-header which returns px)\n                                                      :end-row   integer\n                                                      :start-col integer   ;; cols are returned as px offsets\n                                                      :end-col   integer}\n                                    ctrlKey:         When true, Control key is currently pressed\n                                    shiftKey:        When true, Shift key is currently pressed\n                                    event            The original MouseEvent (https://developer.mozilla.org/en/docs/Web/API/MouseEvent)\n                              Use the :selection-rect style-part to style the selection rectangle\n\n\n     ========== SECTION 6 - column-footers\n\n   - column-footer-renderer   [optional (fn [])]\n                              Render the entire column footer\n                              Height is determined by the column-footer-height arg\n                              Width is determined by the width available to the v-table OR the row-viewport-width arg if specified\n                              Passed args: none\n\n   - column-footer-height     [optional number, default = 0]\n                              px height of the column footer section\n\n\n     ========== SECTION 7 - top right\n\n   - top-right-renderer       [optional (fn [])]\n                              Render the top right section\n                              Height is determined by the column-header-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n\n     ========== SECTION 8 - row-footers\n\n   - row-footer-renderer      [optional (fn [row-index row])]\n                              Render a single row footer\n                              Height is determined by the row-height arg\n                              Width is determined by the component itself\n                              Passed args: row-index (0-based), row (a map, or other data structure from model)\n\n\n     ========== SECTION 9 - bottom-right\n\n   - bottom-right-renderer    [optional (fn [])]\n                              Render the bottom right section\n                              Height is determined by the column-footer-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n                              NOTE: The width of the RIGHT container section (encompassing sections 7, 8 and 9 above)\n                                    is determined by the widest section\n\n\n     ========== Scrolling the table so that a block of rows/columns become visible\n\n   - scroll-rows-into-view    [optional atom map]\n                              Set this argument to scroll the table to a particular row range\n                              map example:\n                                {:start-row   12   ;; Start row number (zero-based) to be scrolled into view\n                                 :end-row     14}  ;; End row number to be scrolled into view\n\n   - scroll-columns-into-view [optional atom map]\n                              Set this argument to scroll the table to a particular column range (in this case columns are pixels!)\n                              map example:\n                                {:start-col   200  ;; Start column px offset to be scrolled into view\n                                 :end-col     300} ;; End column px offset to be scrolled into view\n\n\n     ========== Styling different parts of the table (and setting attributes for those parts)\n\n   - class                    Add extra class(es) to the outer container\n\n   - parts                    [optional nested map]\n                              Allows classes, styles and attributes (e.g. custom event handlers) to be specified for each part of the table\n\n                              Keys can be:\n\n                               - :wrapper                             The outer container of the table\n\n                               - :left-section                        The left v-box container section of the table, containing:\n                                  - :top-left                         Top left section (1)\n                                  - :row-headers                      Row header viewport section (2)\n                                     - :row-header-selection-rect     The row-header rectangle used for click+drag selection of row headers\n                                     - :row-header-content            The v-box containing one row header (row-header-render renders in here)\n                                  - :bottom-left                      Bottom left section (3)\n\n                               - :middle-section                      The middle v-box container section of the table, containing:\n                                  - :column-headers                   Column header viewport section (4)\n                                     - :column-header-selection-rect  The column-header rectangle used for click+drag selection of column headers\n                                     - :column-header-content         The box containing the column header (column-header-render renders in here)\n                                  - :rows                             Main row viewport section (5)\n                                     - :row-selection-rect            The ROW rectangle used for click+drag selection of rows\n                                                                      Defaults to being above the rows (:z-index 1). Set to 0 to place it underneath rows\n                                     - :row-content                   The v-box containing one row (row-render renders in here)\n                                  - :column-footers                   Column footer viewport section (6)\n                                     - :column-footer-content         The box containing the column footer (column-footer-render renders in here)\n                                  - :h-scroll                         The horizontal scrollbar\n                                                                      \n                               - :right-section                       The right container section v-box of the table, containing:\n                                  - :top-right                        Top right section (7)\n                                  - :row-footers                      Row footer viewport section (8)\n                                     - :row-footer-content            The v-box containing one row footer (row-footer-render renders in here)\n                                  - :bottom-right                     Bottom right section (9)\n                                                                      \n                               - :v-scroll-section                    The v-box containing the vertical scrollbar:\n                                  - :v-scroll                         The vertical scrollbar\n   ","^25",["^ ","^1K",true,"^26",0,"^1N",0,"^1H",[["^1?",[["^ ","^20",["^38","^39","^3:","^2W","^2E","^3;","^3<"],"^24",["^ ","^39",true],"^3=","^3>"]]]],"^1>",["^1?",[["~$&",["^ ","^20",["^38","^39","^3:","^2W","^2E","^3;","^3<"],"^24",["^ ","^39",true],"^3=","^3>"]]]],"^1J",["^1?",[null]]]],"^G","~$re-com.v-table/v-table","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",14,"^25",["^ ","^1K",true,"^26",0,"^1N",0,"^1H",[["^1?",[["^ ","^20",["^38","^39","^3:","^2W","^2E","^3;","^3<"],"^24",["^ ","^39",true],"^3=","^3>"]]]],"^1>",["^1?",[["~$&",["^ ","^20",["^38","^39","^3:","^2W","^2E","^3;","^3<"],"^24",["^ ","^39",true],"^3=","^3>"]]]],"^1J",["^1?",[null]]],"^1H",[["^1?",[["^ ","^20",["^38","^39","^3:","^2W","^2E","^3;","^3<"],"^24",["^ ","^39",true],"^3=","^3>"]]]],"^1I",null,"^26",0,"^1J",["^1?",[null]],"^1;",1,"^1K",true,"^28",[["^ ","^26",0,"^1K",true,"^29",["^F",["^1M","^2A","^2:"]]]],"^1:",552,"^1L","^2;","^1<",552,"^1N",0,"^1O",true,"^1>",["^1?",[["~$&",["^ ","^20",["^38","^39","^3:","^2W","^2E","^3;","^3<"],"^24",["^ ","^39",true],"^3=","^3>"]]]],"^1F","Renders a scrollable table with optional fixed column and row headers and footers, totalling nine addressable sections\n  By default, it only displays rows that are visible, so is very efficient for large data structures\n  The table supports click+drag selections within the rows section (5), row header section (2) and col header section (4)\n\n  The table is laid out using an h-box for the outer component, with four v-box 'container\n  sections' sitting next to each other:\n\n  +-----+---------+-----+-+\n  |     |         |     | |\n  |     |         |     | |\n  |     |         |     | |\n  |LEFT | MIDDLE  |RIGHT|VS\n  |     |         |     | |\n  |     |         |     | |\n  |     |         |     | |\n  |- - -|- - - - -|- - -|-|\n  +-----+---HS----+-----+-+\n\n  The four 'container section' v-boxes are named:\n   - LEFT:   contains the row headers (and corresponding two corner sections)\n   - MIDDLE: contains the main content area (the rows), along with column headers and footers and the horizontal scrollbar (HS)\n   - RIGHT:  contains the row footers (and corresponding two corner sections)\n   - VS:     contains the vertical scrollbar\n\n  Each container section holds 'sections' which are numbered:\n\n  +-----+---------+-----+\n  |  1  |    4    |  7  |\n  +-----+---------+-----+-+\n  |     |         |     | |\n  |  2  |    5    |  8  |VS\n  |     |         |     | |\n  +-----+---------+-----+ +\n  |  3  |    6    |  9  |\n  +-----+---------+-----+\n        +---HS----+\n\n  The nine 'sections' are named:\n   - 1: top-left\n   - 2: row-headers\n   - 3: bottom-left\n   - 4: column-headers\n   - 5: rows\n   - 6: column-footers\n   - 7: top-right\n   - 8: row-footers\n   - 9: bottom-right\n\n  The corner sections (1, 3, 7, 9) are fixed (i.e. do not scroll) and consist of a single 'content' area\n\n  The other sections are scrollable: (2, 8) vertical, (4, 6) horizontal and (5) vertical & horizontal as\n  a 'viewport' onto their (potentially larger) 'content' area\n\n\n  Arguments:\n\n   - model                    [mandatory atom containing vector of maps (or other data structures)]\n                              The data to be displayed, consisting of rows. Each row is normally a map but could be anything)\n                              Rows MUST contain a unique id (specified via :key-fn arg)\n                              They are passed to the row-renderer (section 5), row-header-renderer (section 2) and row-footer-renderer (section 8)\n                              NOTE: data for sections 1, 3, 4, 6, 7 and 9 are not included in model\n\n   - key-fn                   [optional fn or keyword to extract a unique id from the row data, or not specified/nil to indicate\n                              that v-table should use the internally generated 0-based row-id]\n                              A row is passed to key-fn and it returns the unique identifier for that row\n\n   - virtual?                 [optional bool, default = true]\n                              When true, use virtual feature where only a screen-full (viewport) of rows are rendered at any one time\n                              Use true for tables with many rows to reduce initialisation time and resource usage\n                              You can use false for smaller tables to improve performance of vertical scrolling\n\n   - remove-empty-row-space?  [optional bool, default = true]\n                              Specifies whether to remove empty row space (the space between the last row and the horizontal scrollbar)\n                              for small tables that don't fill the space available to the v-table\n                              This will cause the horizontal scrollbar section to be nestled against the last row, and whatever is\n                              underneath the v-table to be brought up with it\n\n   - max-width                [optional string, default = nil (table will fill available space)]\n                              MAXIMUM width of the entire v-table\n                              NOTE: This is specified as a normal CSS value, e.g. \"1024px\" or \"90%\"\n\n\n     ========== SECTION 1 - top-left\n\n   - top-left-renderer        [optional (fn [])]\n                              Render the top left section\n                              Height is determined by the :column-header-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n\n     ========== SECTION 2 - row-headers\n\n   - row-header-renderer      [optional (fn [row-index row])]\n                              Render a single row header\n                              Height is determined by the row-height arg\n                              Width is determined by the component itself\n                              Passed args: row-index (0-based), row (a map, or other data structure from model)\n\n   - row-header-selection-fn  [optional (fn [selection-event coords ctrlKey shiftKey event])]\n                              If provided, indicates that the row header section is selectable via click+drag\n                              Passed args: see row-selection-fn below for details\n                              Use the :row-header-selection-rect style-part to style the selection rectangle\n\n\n     ========== SECTION 3 - bottom-left\n\n   - bottom-left-renderer     [optional (fn [])]\n                              Render the bottom left section\n                              Height is determined by the column-footer-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n                              NOTE: The width of the LEFT container section (encompassing sections 1, 2 and 3 above)\n                                    is determined by the widest section\n\n\n     ========== SECTION 4 - column-headers\n\n   - column-header-renderer   [optional (fn [])]\n                              Render the entire column header\n                              Height is determined by the column-header-height arg\n                              Width is determined by the width available to the v-table OR the row-viewport-width arg if specified\n                              Passed args: none\n\n   - column-header-height     [optional number, default = 0]\n                              px height of the column header section\n\n   - column-header-selection-fn  [optional (fn [selection-event coords ctrlKey shiftKey event])]\n                              if provided, indicates that the column header section is selectable via click+drag\n                              Passed args: see row-selection-fn below for details\n                              Use the :column-header-selection-rect style-part to style the selection rectangle\n\n\n     ========== SECTION 5 - rows (main content area)\n\n   - row-renderer             [mandatory (fn [row-index row])]\n                              Render a single content row\n                              [DJ] Wants to state that columns are not virtual and all horizontal content is rendered\n                              Height is determined by the row-height arg\n                              Width is determined by the width available to the v-table OR the row-viewport-width arg if specified\n                              Passed args: row-index (0-based), row (a map, or other data structure from model)\n\n   - row-height               [mandatory number]\n                              px height of each row\n\n   - row-content-width        [mandatory number]\n                              px width of the content rendered by row-renderer\n\n   - row-viewport-width       [optional number, default = nil (take up all available width)]\n                              px width of the row viewport area\n                              If not specified, takes up all width available to it\n\n   - row-viewport-height      [optional number, default = nil (take up all available height)]\n                              px height of the row viewport area\n                              If not specified, takes up all height available to it\n\n   - max-row-viewport-height  [optional number, default = nil (determined by parent height and number of rows)]\n                              MAXIMUM px height of the row viewport area\n                              Conveniently excludes height of col header and footer and horizontal scrollbar\n                              For this to be effective, the parent of the v-table component should have ':size none'\n\n   - row-selection-fn         [optional (fn [selection-event coords ctrlKey shiftKey event])]\n                              If provided, indicates that the row section is selectable via click+drag\n                              The fn will be called (on mouse-down, mouse-move and mouse-up) with four positional args\n                              Passed args:\n                                    selection-event: One of :selection-start, :selecting or :selection-end\n                                    coords:          {:start-row integer   ;; rows are returned as zero-based row numbers (except column-header which returns px)\n                                                      :end-row   integer\n                                                      :start-col integer   ;; cols are returned as px offsets\n                                                      :end-col   integer}\n                                    ctrlKey:         When true, Control key is currently pressed\n                                    shiftKey:        When true, Shift key is currently pressed\n                                    event            The original MouseEvent (https://developer.mozilla.org/en/docs/Web/API/MouseEvent)\n                              Use the :selection-rect style-part to style the selection rectangle\n\n\n     ========== SECTION 6 - column-footers\n\n   - column-footer-renderer   [optional (fn [])]\n                              Render the entire column footer\n                              Height is determined by the column-footer-height arg\n                              Width is determined by the width available to the v-table OR the row-viewport-width arg if specified\n                              Passed args: none\n\n   - column-footer-height     [optional number, default = 0]\n                              px height of the column footer section\n\n\n     ========== SECTION 7 - top right\n\n   - top-right-renderer       [optional (fn [])]\n                              Render the top right section\n                              Height is determined by the column-header-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n\n     ========== SECTION 8 - row-footers\n\n   - row-footer-renderer      [optional (fn [row-index row])]\n                              Render a single row footer\n                              Height is determined by the row-height arg\n                              Width is determined by the component itself\n                              Passed args: row-index (0-based), row (a map, or other data structure from model)\n\n\n     ========== SECTION 9 - bottom-right\n\n   - bottom-right-renderer    [optional (fn [])]\n                              Render the bottom right section\n                              Height is determined by the column-footer-height arg\n                              Width is determined by the component itself\n                              Passed args: none\n\n                              NOTE: The width of the RIGHT container section (encompassing sections 7, 8 and 9 above)\n                                    is determined by the widest section\n\n\n     ========== Scrolling the table so that a block of rows/columns become visible\n\n   - scroll-rows-into-view    [optional atom map]\n                              Set this argument to scroll the table to a particular row range\n                              map example:\n                                {:start-row   12   ;; Start row number (zero-based) to be scrolled into view\n                                 :end-row     14}  ;; End row number to be scrolled into view\n\n   - scroll-columns-into-view [optional atom map]\n                              Set this argument to scroll the table to a particular column range (in this case columns are pixels!)\n                              map example:\n                                {:start-col   200  ;; Start column px offset to be scrolled into view\n                                 :end-col     300} ;; End column px offset to be scrolled into view\n\n\n     ========== Styling different parts of the table (and setting attributes for those parts)\n\n   - class                    Add extra class(es) to the outer container\n\n   - parts                    [optional nested map]\n                              Allows classes, styles and attributes (e.g. custom event handlers) to be specified for each part of the table\n\n                              Keys can be:\n\n                               - :wrapper                             The outer container of the table\n\n                               - :left-section                        The left v-box container section of the table, containing:\n                                  - :top-left                         Top left section (1)\n                                  - :row-headers                      Row header viewport section (2)\n                                     - :row-header-selection-rect     The row-header rectangle used for click+drag selection of row headers\n                                     - :row-header-content            The v-box containing one row header (row-header-render renders in here)\n                                  - :bottom-left                      Bottom left section (3)\n\n                               - :middle-section                      The middle v-box container section of the table, containing:\n                                  - :column-headers                   Column header viewport section (4)\n                                     - :column-header-selection-rect  The column-header rectangle used for click+drag selection of column headers\n                                     - :column-header-content         The box containing the column header (column-header-render renders in here)\n                                  - :rows                             Main row viewport section (5)\n                                     - :row-selection-rect            The ROW rectangle used for click+drag selection of rows\n                                                                      Defaults to being above the rows (:z-index 1). Set to 0 to place it underneath rows\n                                     - :row-content                   The v-box containing one row (row-render renders in here)\n                                  - :column-footers                   Column footer viewport section (6)\n                                     - :column-footer-content         The box containing the column footer (column-footer-render renders in here)\n                                  - :h-scroll                         The horizontal scrollbar\n                                                                      \n                               - :right-section                       The right container section v-box of the table, containing:\n                                  - :top-right                        Top right section (7)\n                                  - :row-footers                      Row footer viewport section (8)\n                                     - :row-footer-content            The v-box containing one row footer (row-footer-render renders in here)\n                                  - :bottom-right                     Bottom right section (9)\n                                                                      \n                               - :v-scroll-section                    The v-box containing the vertical scrollbar:\n                                  - :v-scroll                         The vertical scrollbar\n   "],"~$v-table-parts",["^ ","^G","~$re-com.v-table/v-table-parts","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1:",509,"^1;",1,"^1<",509,"^1=",19,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",509,"^1;",6,"^1<",509,"^1=",19],"^29",["^F",["~$clj","^2;","~$cljs.core/ISet","~$cljs.core/MetaFn","^2B"]]],"~$scrollbar-margin",["^ ","^G","~$re-com.v-table/scrollbar-margin","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1:",18,"^1;",1,"^1<",18,"^1=",22,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",18,"^1;",6,"^1<",18,"^1=",22],"^29","~$number"],"~$scrollbar-tot-thick",["^ ","^G","~$re-com.v-table/scrollbar-tot-thick","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1:",19,"^1;",1,"^1<",19,"^1=",25,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",19,"^1;",6,"^1<",19,"^1=",25],"^29","^3G"],"~$row-footer-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",415,"^1;",7,"^1<",415,"^1=",25,"^1>",["^1?",["^1@",["^1?",[["^2D","^1R","^1S","^1T","^1U","^1C","^1D","^1E"]]]]],"^1F","The row-footer section 'content' component. Takes a function that renders row-footers and draws all of\n  them in section 8 (sections explained below).\n  When in virtual? mode, only a screen-full of row-footers are passed to this component at any one time.\n  This component is also responsible for setting the vertical scroll position of this section based on scroll-y\n\n  Arguments:\n   - row-footer-renderer function that knows how to render row-footers (will be passed the 0-based row-index and row to get the data from)\n   - key-fn              function/keyword that returns a unique id out of the row map/object, or nil to use the row's 0-based row-index\n   - top-row-index       the 0-based index of the row that is currently at the top of the viewport (for virtual mode)\n   - rows                a vector of row maps (or objects) to render the row-footers from\n   - scroll-y            current horizontal scrollbar position in px\n  "],"^G","~$re-com.v-table/row-footer-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",25,"^1H",["^1?",[["^2D","^1R","^1S","^1T","^1U","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",415,"^1L","^1M","^1<",415,"^1N",8,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^2D","^1R","^1S","^1T","^1U","^1C","^1D","^1E"]]]]],"^1F","The row-footer section 'content' component. Takes a function that renders row-footers and draws all of\n  them in section 8 (sections explained below).\n  When in virtual? mode, only a screen-full of row-footers are passed to this component at any one time.\n  This component is also responsible for setting the vertical scroll position of this section based on scroll-y\n\n  Arguments:\n   - row-footer-renderer function that knows how to render row-footers (will be passed the 0-based row-index and row to get the data from)\n   - key-fn              function/keyword that returns a unique id out of the row map/object, or nil to use the row's 0-based row-index\n   - top-row-index       the 0-based index of the row that is currently at the top of the viewport (for virtual mode)\n   - rows                a vector of row maps (or objects) to render the row-footers from\n   - scroll-y            current horizontal scrollbar position in px\n  "],"~$row-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",302,"^1;",7,"^1<",302,"^1=",18,"^1>",["^1?",["^1@",["^1?",[["^2P","^1R","^1S","^1T","^1Y","^1U","^1C","^1D","^1E"]]]]],"^1F","The rows section 'content' component. Takes a function that renders rows and draws all of them in section 5 (sections explained below).\n  When in virtual? mode, only a screen-full of rows are passed to this component at any one time.\n  This component is also responsible for setting the horizontal and vertical scroll position of this section based on scroll-x and scroll-y\n\n  Arguments:\n   - row-renderer  function that knows how to render rows (will be passed the 0-based row-index and row to render)\n   - key-fn        function/keyword that returns a unique id out of the row map/object, or nil to use the row's 0-based row-index\n   - top-row-index the 0-based index of the row that is currently at the top of the viewport (for virtual mode)\n   - rows          a vector of row maps (or objects) to render\n   - scroll-x      current horizontal scrollbar position in px\n   - scroll-y      current horizontal scrollbar position in px\n  "],"^G","~$re-com.v-table/row-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",18,"^1H",["^1?",[["^2P","^1R","^1S","^1T","^1Y","^1U","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",302,"^1L","^1M","^1<",302,"^1N",9,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^2P","^1R","^1S","^1T","^1Y","^1U","^1C","^1D","^1E"]]]]],"^1F","The rows section 'content' component. Takes a function that renders rows and draws all of them in section 5 (sections explained below).\n  When in virtual? mode, only a screen-full of rows are passed to this component at any one time.\n  This component is also responsible for setting the horizontal and vertical scroll position of this section based on scroll-x and scroll-y\n\n  Arguments:\n   - row-renderer  function that knows how to render rows (will be passed the 0-based row-index and row to render)\n   - key-fn        function/keyword that returns a unique id out of the row map/object, or nil to use the row's 0-based row-index\n   - top-row-index the 0-based index of the row that is currently at the top of the viewport (for virtual mode)\n   - rows          a vector of row maps (or objects) to render\n   - scroll-x      current horizontal scrollbar position in px\n   - scroll-y      current horizontal scrollbar position in px\n  "],"~$row-header-viewport",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",207,"^1;",7,"^1<",207,"^1=",26,"^1>",["^1?",["^1@",["^1?",[["^1Q","^1R","^1S","^1T","^1U","~$row-header-selection-fn",["^2R","^2S","^2T","^2U"],"^2V","^2E","^2F","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]]]],"^1F","Render section 2 - the viewport component (which renders the content component as its child)"],"^G","~$re-com.v-table/row-header-viewport","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",26,"^1H",["^1?",[["^1Q","^1R","^1S","^1T","^1U","^3O","~$p__13391","^2V","^2E","^2F","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",207,"^1L","^1M","^1<",207,"^1N",19,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^1Q","^1R","^1S","^1T","^1U","^3O",["^2R","^2S","^2T","^2U"],"^2V","^2E","^2F","^1C","^1D","^1E","^2Z","^2[","^30","^2G","^2H","^2I"]]]]],"^1F","Render section 2 - the viewport component (which renders the content component as its child)"],"~$scrollbar-thickness",["^ ","^G","~$re-com.v-table/scrollbar-thickness","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1:",17,"^1;",1,"^1<",17,"^1=",25,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",17,"^1;",6,"^1<",17,"^1=",25],"^29","^3G"],"~$px",["^ ","^G","~$re-com.v-table/px","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1:",21,"^1;",1,"^1<",21,"^1=",8,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",21,"^1;",6,"^1<",21,"^1=",8],"^29","^2:"],"~$v-table-parts-desc",["^ ","^G","~$re-com.v-table/v-table-parts-desc","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1:",479,"^1;",1,"^1<",479,"^1=",24,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",479,"^1;",6,"^1<",479,"^1=",24],"^29",["^F",["^1M","^2B"]]],"~$top-left-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",165,"^1;",7,"^1<",165,"^1=",23,"^1>",["^1?",["^1@",["^1?",[["~$top-left-renderer","^2M","^1C","^1D","^1E"]]]]],"^1F","Render section 1 - the content component"],"^G","~$re-com.v-table/top-left-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",23,"^1H",["^1?",[["^3Y","^2M","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",165,"^1L","^1M","^1<",165,"^1N",5,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^3Y","^2M","^1C","^1D","^1E"]]]]],"^1F","Render section 1 - the content component"],"~$column-footer-viewport",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",380,"^1;",7,"^1<",380,"^1=",29,"^1>",["^1?",["^1@",["^1?",[["~$column-footer-renderer","^1Y","^2W","^1B","^1C","^1D","^1E","^2G","^2H","^2I"]]]]],"^1F","Render section 6 - the viewport component (which renders the content component as its child)"],"^G","~$re-com.v-table/column-footer-viewport","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",29,"^1H",["^1?",[["^40","^1Y","^2W","^1B","^1C","^1D","^1E","^2G","^2H","^2I"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",380,"^1L","^1M","^1<",380,"^1N",10,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^40","^1Y","^2W","^1B","^1C","^1D","^1E","^2G","^2H","^2I"]]]]],"^1F","Render section 6 - the viewport component (which renders the content component as its child)"],"~$v-table-args-desc",["^ ","^G","~$re-com.v-table/v-table-args-desc","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1:",514,"^1;",1,"^1<",514,"^1=",23,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",514,"^1;",6,"^1<",514,"^1=",23],"^29",["^F",["^1M","^2B"]]],"~$bottom-right-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",464,"^1;",7,"^1<",464,"^1=",27,"^1>",["^1?",["^1@",["^1?",[["~$bottom-right-renderer","^1B","^1C","^1D","^1E"]]]]],"^1F","Render section 9 - the content component"],"^G","~$re-com.v-table/bottom-right-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",27,"^1H",["^1?",[["^45","^1B","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",464,"^1L","^1M","^1<",464,"^1N",5,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^45","^1B","^1C","^1D","^1E"]]]]],"^1F","Render section 9 - the content component"],"~$column-footer-content",["^ ","^17",null,"^18",["^ ","^19","/Users/ray/development/oss/repl-node/resources/public/js/compiled/out/re_com/v_table.cljs","^1:",361,"^1;",7,"^1<",361,"^1=",28,"^1>",["^1?",["^1@",["^1?",[["^40","^1Y","^1C","^1D","^1E"]]]]],"^1F","The column-footer section 'content' component. Takes a function that renders column-footers and draws all of\n  them in section 6 (sections explained below).\n  This component is also responsible for setting the horizontal scroll position of this section based on scroll-x\n\n  Arguments:\n   - column-footer-renderer function that knows how to render column-footers\n   - scroll-x            current horizontal scrollbar position in px\n  "],"^G","~$re-com.v-table/column-footer-content","^19","resources/public/js/compiled/out/re_com/v_table.cljs","^1=",28,"^1H",["^1?",[["^40","^1Y","^1C","^1D","^1E"]]],"^1I",null,"^1J",["^1?",[null,null]],"^1;",1,"^1K",false,"^1:",361,"^1L","^1M","^1<",361,"^1N",5,"^1O",true,"^1>",["^1?",["^1@",["^1?",[["^40","^1Y","^1C","^1D","^1E"]]]]],"^1F","The column-footer section 'content' component. Takes a function that renders column-footers and draws all of\n  them in section 6 (sections explained below).\n  This component is also responsible for setting the horizontal scroll position of this section based on scroll-x\n\n  Arguments:\n   - column-footer-renderer function that knows how to render column-footers\n   - scroll-x            current horizontal scrollbar position in px\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^>","^>","^B","^B","^@","^@","^L","^M","^M","^M"],"~:cljs.analyzer/constants",["^ ","~:seen",["^F",["~:args","~:max-row-viewport-height","~:description","~:children","~:row-renderer","~:virtual?","~:selection-start","~:end-row","~:horizontal","~:on-mouse-enter","~:top-left-renderer","~:max-height","~:key","~:else","~:row-footer-content","~:column-footer-renderer","~:start-row","~:top","~:thumb-ratio","~:column-footers","~:row-header-renderer","~:default","~:row-viewport-width","~:overflow","~:row-content","^G","~:remove-empty-row-space?","~:margin-left","~:top-right","~:component-did-mount","^19","~:background-color","~:negative","~:row-header","~:scroll-rows-into-view","~:row-selection-fn","~:h-scroll","~:column-header-selection-fn","~:margin-top","~:max-scroll-pos","~:parts","~:width","~:cursor","~:vertical","~:on-wheel","~:type","~:top-left","~:src","~:row-height","~:max-width","~:component","~:on-mouse-down","~:bottom-right","~:start-col","~:size","~:top-right-renderer","~:style","~:row-content-width","~:column-footer-height","~:column-header","~:level","~:bottom-left","~:rows","~:div","~:scrollbar-content-ratio","~:row-selection-rect","~:key-fn","~:scroll-pos","~:column-header-height","~:z-index","~:debug-as","~:content-length","~:reagent-render","~:scroll-columns-into-view","~:internal-scroll-pos","~:thumb-length","^1:","~:column-header-selection-rect","~:column-footer-content","~:id","~:class","~:notes","~:row-viewport-height","~:row-footers","~:component-will-unmount","~:code","~:length","~:column-header-renderer","~:b","~:row-header-selection-rect","~:display-name","~:column-headers","~:row-headers","~:position","~:row-header-selection-fn","~:validate-fn","~:on-mouse-leave","~:right-section","~:name-label","~:child","~:end-col","~:bottom-left-renderer","~:legacy","~:bottom-right-renderer","~:middle-section","~:row-footer-renderer","~:selection-end","~:on-change","~:border","~:selecting","~:row-header-content","~:border-radius","~:impl","~:column-header-content","~:v-scroll","~:wrapper","~:v-scroll-section","~:i","~:required","~:height","~:row","~:left","~:span","~:left-section","~:margin","~:model","~:attr"]],"~:order",["^5<","^58","^6L","^4E","^56","^5O","^4J","^5Y","^68","^4O","^5R","^5V","^5G","^5>","^5Z","^6W","^62","^4Z","^6P","^4T","^72","^4F","^6A","^5B","^6D","^19","^1:","^59","^4W","^55","^4[","^4@","^4I","^6>","^4H","^50","^5E","^5J","^6X","^61","^G","^5K","^6Q","^63","^6T","^6[","^5=","^6=","^6:","^6O","^5L","^6I","^6<","^5[","^6R","^5M","^5P","^4U","^4P","^60","^53","^6B","^4X","^65","^4K","^5C","^6U","^6C","^6G","^6S","^6V","^6@","^4?","^71","^6Z","^67","^4R","^5Q","^4B","^5?","^5S","^5I","^5H","^5@","^4G","^4Q","^6F","^69","^4A","^4L","^5F","^6J","^6H","^6?","^54","^52","^4S","^64","^4>","~:b","~:i","^51","^5X","^4V","^57","^5U","^5N","^5T","^4N","^6Y","^6M","^4M","^4D","^5D","^6E","^6N","^6K","^4C","^6;","^4Y","^66","^5W","^5A","^4=","^5;","^70","^5:"]],"^1F",null]